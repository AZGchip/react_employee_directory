{"version":3,"sources":["components/NavBar.js","components/Filter.js","components/List.js","components/Body.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","className","Filterby","props","type","onChange","handleFilterChange","name","value","search","id","placeholder","employees","firstName","lastName","occupation","sortCase","filteredArray","List","state","filter","event","target","filteredEmployee","console","log","e","Object","keys","toUpperCase","includes","setState","employeeArray","map","employee","key","handleSortChange","param","invert","compareString","a","b","sort","Filter","this","onClick","Component","Container","App","Body","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f01cf193.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction NavBar() {\r\n\treturn <div className=\"container px-0\">\r\n\t\t<nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n\t\t\t<div className=\"navbar-brand\" >Employee Directory <small className=\"text-secondary\">\"the directory for employees\"</small></div>\r\n\t\t\t\r\n\t\t</nav>\r\n\t</div>\r\n}\r\nexport default NavBar","import React from \"react\"\r\nfunction Filterby(props) {\r\n    return <div className=\"container\">\r\n        <div className=\" row\">\r\n\r\n            <input type=\"text\" onChange={props.handleFilterChange} name=\"filter\" value={props.search} className=\"\" id=\"filter\" placeholder=\"Filter by Firstname\" />\r\n\r\n        </div>\r\n    </div>\r\n}\r\nexport default Filterby\r\n","\nimport React, { Component } from \"react\"\nimport Filter from \"./Filter\"\nlet employees = [\n    {\n        id: 1,\n        firstName: \"Andy\",\n        lastName: \"Brook\",\n        occupation: \"Intern\"\n    },\n    {\n        id: 2,\n        firstName: \"Brian\",\n        lastName: \"Chase\",\n        occupation: \"Management\"\n    },\n    {\n        id: 3,\n        firstName: \"Jonathan\",\n        lastName: \"Davis\",\n        occupation: \"Sales\"\n    },\n    {\n        id: 4,\n        firstName: \"William\",\n        lastName: \"Smith\",\n        occupation: \"Food delivery\"\n    },\n    {\n        id: 5,\n        firstName: \"Brook\",\n        lastName: \"Johnson\",\n        occupation: \"Recruitment\"\n    },\n    {\n        id: 6,\n        firstName: \"Chip\",\n        lastName: \"Reeds\",\n        occupation: \"Cashier\"\n    }\n]\nlet sortCase = {}\nlet filteredArray = {};\n\n//sorts , and/or filters the \"employees\" as well as displays a table of them.\nclass List extends Component {\n    state = {\n        employees,\n        filteredArray,\n        sortCase,\n        filter: \"\",\n    }\n    constructor(props) {\n        super(props)\n        this.state = {\n            employeeArray: employees.map(employee => (\n                <tr className=\"\" key={employee.id}>\n                    <td>{employee.firstName}</td>\n                    <td>{employee.lastName}</td>\n                    <td>{employee.occupation}</td>\n                </tr>\n            )),\n            filteredArray: employees\n        }\n    }\n    //filter\n    handleFilterChange = event => {\n        const name = event.target.name\n        const value = event.target.value\n        console.log(\"this is name\", event.target.name)\n        //filters based on input string\n        var filteredEmployee;\n        if (value) {\n            filteredEmployee = employees.filter(function (e) {\n\n                let key = Object.keys(e)[1]\n                return e[key].toUpperCase().includes(event.target.value.toUpperCase())\n            })\n        }\n        else {\n            filteredEmployee = employees\n            console.log(\"else\")\n        }\n        console.log(filteredEmployee)\n        this.setState({\n            filteredArray: filteredEmployee,\n            employeeArray: filteredEmployee.map(employee => (\n                <tr className=\"\" key={employee.id}>\n                    <td>{employee.firstName}</td>\n                    <td>{employee.lastName}</td>\n                    <td>{employee.occupation}</td>\n                </tr>\n            ))\n        });\n        console.log(\"this is filtered Array\", this.state.filteredArray)\n    };\n    //sort\n    handleSortChange = (param) => {\n        // y/n is inverted\n        let invert;\n        // key selection when sorting\n        let type;\n\n        //If this.state.sortCase is not undefined AND sortCase = param, changes sortCase to not match next duplicate button press. sets invert to true\n        if (this.state.sortCase && this.state.sortCase === param) {\n            this.setState({ sortCase: param + \"-invert\" })\n            invert = true;\n        }\n        // if sortcase is undefined or does not match params, sets sortCase to equal param. sets invert to false\n        else {\n            this.setState({ sortCase: param })\n            invert = false;\n        }\n\n        //compares an array of objects and sorts objects based on selected type using given param.\n        function compareString(a, b) {\n            switch (param) {\n                case \"firstname\":\n                    type = 1;\n                    break;\n                case \"lastname\":\n                    type = 2;\n                    break;\n                case \"occupation\":\n                    type = 3;\n                    break;\n                default:\n                    type = 1;\n                    invert = false;\n            }\n            let key = Object.keys(a)[type]\n            if (!invert) {\n                if (a[key] > b[key]) {\n                    return 1\n                }\n                if (a[key] < b[key]) {\n                    return -1\n                }\n                return 0\n            }\n            else {\n                if (a[key] < b[key]) {\n                    return 1\n                }\n                if (a[key] > b[key]) {\n                    return -1\n                }\n                return 0\n            }\n        }\n        //changes state to update the table with sorted information\n        this.setState((state, props) => ({\n            employeeArray: state.filteredArray.sort(compareString).map(employee => (\n                <tr className=\"\" key={employee.id}>\n                    <td>{employee.firstName}</td>\n                    <td>{employee.lastName}</td>\n                    <td>{employee.occupation}</td>\n                </tr>\n            ))\n        }));\n\n\n    }\n\n//returns the table and filter input box\n    render() {\n        return (\n            <div>\n                <Filter\n                    search={this.state.search}\n                    handleFilterChange={this.handleFilterChange}\n                />\n                <table className=\" container  table table-bordered table-striped\">\n                    <thead className=\"thead\">\n                        <tr className=\"table-secondary\">\n                            <th onClick={() => this.handleSortChange(\"firstname\")}>First Name</th>\n                            <th onClick={() => this.handleSortChange(\"lastname\")}>Last Name</th>\n                            <th onClick={() => this.handleSortChange(\"occupation\")}>Occupation</th>\n                        </tr>\n                    </thead>\n                    <tbody className=\"\">\n                        {this.state.employeeArray}\n                    </tbody>\n                </table>\n            </div>\n        );\n    }\n}\nexport default List","import React from \"react\";\nimport List from \"./List\"\n\n\nfunction Container(props) {\n\n    return <div>\n        <List employees={props.employees} />\n    </div>;\n}\nexport default Container","import React from \"react\";\r\nimport NavBar from \"./components/NavBar\";\r\nimport Body from \"./components/Body\"\r\n\r\n\r\nfunction App() {\r\n  return (<div>\r\n    <NavBar />\r\n    <Body className=\"bg-dark\"/>\r\n  </div>);\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}